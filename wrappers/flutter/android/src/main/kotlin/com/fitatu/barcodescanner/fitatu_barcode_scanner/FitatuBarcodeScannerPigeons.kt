// Autogenerated from Pigeon (v25.5.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

package com.fitatu.barcodescanner.fitatu_barcode_scanner

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.EventChannel
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMethodCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer
private object FitatuBarcodeScannerPigeonsPigeonUtils {

  fun createConnectionError(channelName: String): FitatuBarcodeScannerFlutterError {
    return FitatuBarcodeScannerFlutterError("channel-error",  "Unable to establish connection on channel: '$channelName'.", "")  }

  fun wrapResult(result: Any?): List<Any?> {
    return listOf(result)
  }

  fun wrapError(exception: Throwable): List<Any?> {
    return if (exception is FitatuBarcodeScannerFlutterError) {
      listOf(
        exception.code,
        exception.message,
        exception.details
      )
    } else {
      listOf(
        exception.javaClass.simpleName,
        exception.toString(),
        "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
      )
    }
  }
  fun deepEquals(a: Any?, b: Any?): Boolean {
    if (a is ByteArray && b is ByteArray) {
        return a.contentEquals(b)
    }
    if (a is IntArray && b is IntArray) {
        return a.contentEquals(b)
    }
    if (a is LongArray && b is LongArray) {
        return a.contentEquals(b)
    }
    if (a is DoubleArray && b is DoubleArray) {
        return a.contentEquals(b)
    }
    if (a is Array<*> && b is Array<*>) {
      return a.size == b.size &&
          a.indices.all{ deepEquals(a[it], b[it]) }
    }
    if (a is List<*> && b is List<*>) {
      return a.size == b.size &&
          a.indices.all{ deepEquals(a[it], b[it]) }
    }
    if (a is Map<*, *> && b is Map<*, *>) {
      return a.size == b.size && a.all {
          (b as Map<Any?, Any?>).containsKey(it.key) &&
          deepEquals(it.value, b[it.key])
      }
    }
    return a == b
  }
      
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FitatuBarcodeScannerFlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

enum class FitatuBarcodeFormat(val raw: Int) {
  /** Aztec 2D barcode format. */
  AZTEC(0),
  /** Codabar 1D barcode format, used in libraries, blood banks, parcels. */
  CODABAR(1),
  /** Code 39 1D barcode format, used in automotive and defense industries. */
  CODE39(2),
  /** Code 93 1D barcode format, compact and high-density, used in logistics. */
  CODE93(3),
  /** Code 128 1D barcode format, high-density, used in shipping and packaging. */
  CODE128(4),
  /** DataBar (RSS-14) 1D barcode format, used in retail and coupons. */
  DATA_BAR(5),
  /** DataBar Expanded 1D barcode format, stores more data, used for coupons. */
  DATA_BAR_EXPANDED(6),
  /** Data Matrix 2D barcode format, used for marking small items. */
  DATA_MATRIX(7),
  /** EAN-8 1D barcode format, short version of EAN-13, used on small packages. */
  EAN8(8),
  /** EAN-13 1D barcode format, used worldwide for retail products. */
  EAN13(9),
  /** ITF (Interleaved 2 of 5) 1D barcode format, used on cartons and packaging. */
  ITF(10),
  /** MaxiCode 2D barcode format, used by UPS for package tracking. */
  MAXICODE(11),
  /** PDF417 2D barcode format, used for transport, identification cards. */
  PDF417(12),
  /** QR Code 2D barcode format, widely used for URLs, payments, and info. */
  QR_CODE(13),
  /** Micro QR Code 2D barcode format, smaller version of QR Code. */
  MICRO_QR_CODE(14),
  /** UPC-A 1D barcode format, used for retail products in North America. */
  UPC_A(15),
  /** UPC-E 1D barcode format, compressed version of UPC-A for small packages. */
  UPC_E(16),
  /**
   * Special value that maps to the `BarcodeFormat.all` enum from the mobile_scanner package.
   * See: https://pub.dev/documentation/mobile_scanner/latest/mobile_scanner/BarcodeFormat.html
   */
  ALL(17),
  /** Unknown code format */
  UNKNOWN(18);

  companion object {
    fun ofRaw(raw: Int): FitatuBarcodeFormat? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class CameraConfig (
  val textureId: Long,
  val previewWidth: Long,
  val previewHeight: Long
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): CameraConfig {
      val textureId = pigeonVar_list[0] as Long
      val previewWidth = pigeonVar_list[1] as Long
      val previewHeight = pigeonVar_list[2] as Long
      return CameraConfig(textureId, previewWidth, previewHeight)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      textureId,
      previewWidth,
      previewHeight,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is CameraConfig) {
      return false
    }
    if (this === other) {
      return true
    }
    return FitatuBarcodeScannerPigeonsPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class CameraImage (
  val cropRect: CropRect,
  val width: Long,
  val height: Long,
  val rotationDegrees: Long
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): CameraImage {
      val cropRect = pigeonVar_list[0] as CropRect
      val width = pigeonVar_list[1] as Long
      val height = pigeonVar_list[2] as Long
      val rotationDegrees = pigeonVar_list[3] as Long
      return CameraImage(cropRect, width, height, rotationDegrees)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      cropRect,
      width,
      height,
      rotationDegrees,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is CameraImage) {
      return false
    }
    if (this === other) {
      return true
    }
    return FitatuBarcodeScannerPigeonsPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class CropRect (
  val left: Long,
  val top: Long,
  val right: Long,
  val bottom: Long
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): CropRect {
      val left = pigeonVar_list[0] as Long
      val top = pigeonVar_list[1] as Long
      val right = pigeonVar_list[2] as Long
      val bottom = pigeonVar_list[3] as Long
      return CropRect(left, top, right, bottom)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      left,
      top,
      right,
      bottom,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is CropRect) {
      return false
    }
    if (this === other) {
      return true
    }
    return FitatuBarcodeScannerPigeonsPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class ScannerOptions (
  val tryHarder: Boolean,
  val tryRotate: Boolean,
  val tryInvert: Boolean,
  val qrCode: Boolean,
  val cropPercent: Double,
  val scanDelay: Long,
  val scanDelaySuccess: Long
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): ScannerOptions {
      val tryHarder = pigeonVar_list[0] as Boolean
      val tryRotate = pigeonVar_list[1] as Boolean
      val tryInvert = pigeonVar_list[2] as Boolean
      val qrCode = pigeonVar_list[3] as Boolean
      val cropPercent = pigeonVar_list[4] as Double
      val scanDelay = pigeonVar_list[5] as Long
      val scanDelaySuccess = pigeonVar_list[6] as Long
      return ScannerOptions(tryHarder, tryRotate, tryInvert, qrCode, cropPercent, scanDelay, scanDelaySuccess)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      tryHarder,
      tryRotate,
      tryInvert,
      qrCode,
      cropPercent,
      scanDelay,
      scanDelaySuccess,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is ScannerOptions) {
      return false
    }
    if (this === other) {
      return true
    }
    return FitatuBarcodeScannerPigeonsPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}
private open class FitatuBarcodeScannerPigeonsPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          FitatuBarcodeFormat.ofRaw(it.toInt())
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          CameraConfig.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          CameraImage.fromList(it)
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          CropRect.fromList(it)
        }
      }
      133.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ScannerOptions.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is FitatuBarcodeFormat -> {
        stream.write(129)
        writeValue(stream, value.raw)
      }
      is CameraConfig -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is CameraImage -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      is CropRect -> {
        stream.write(132)
        writeValue(stream, value.toList())
      }
      is ScannerOptions -> {
        stream.write(133)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface FitatuBarcodeScannerHostApi {
  fun init(options: ScannerOptions)
  fun release()
  fun setTorchEnabled(isEnabled: Boolean)

  companion object {
    /** The codec used by FitatuBarcodeScannerHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      FitatuBarcodeScannerPigeonsPigeonCodec()
    }
    /** Sets up an instance of `FitatuBarcodeScannerHostApi` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: FitatuBarcodeScannerHostApi?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.fitatu_barcode_scanner.FitatuBarcodeScannerHostApi.init$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val optionsArg = args[0] as ScannerOptions
            val wrapped: List<Any?> = try {
              api.init(optionsArg)
              listOf(null)
            } catch (exception: Throwable) {
              FitatuBarcodeScannerPigeonsPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.fitatu_barcode_scanner.FitatuBarcodeScannerHostApi.release$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.release()
              listOf(null)
            } catch (exception: Throwable) {
              FitatuBarcodeScannerPigeonsPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.fitatu_barcode_scanner.FitatuBarcodeScannerHostApi.setTorchEnabled$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val isEnabledArg = args[0] as Boolean
            val wrapped: List<Any?> = try {
              api.setTorchEnabled(isEnabledArg)
              listOf(null)
            } catch (exception: Throwable) {
              FitatuBarcodeScannerPigeonsPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
class FitatuBarcodeScannerFlutterApi(private val binaryMessenger: BinaryMessenger, private val messageChannelSuffix: String = "") {
  companion object {
    /** The codec used by FitatuBarcodeScannerFlutterApi. */
    val codec: MessageCodec<Any?> by lazy {
      FitatuBarcodeScannerPigeonsPigeonCodec()
    }
  }
  fun onTextureChanged(cameraConfigArg: CameraConfig?, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.fitatu_barcode_scanner.FitatuBarcodeScannerFlutterApi.onTextureChanged$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(cameraConfigArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FitatuBarcodeScannerFlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(FitatuBarcodeScannerPigeonsPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }
  fun onTorchStateChanged(isEnabledArg: Boolean, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.fitatu_barcode_scanner.FitatuBarcodeScannerFlutterApi.onTorchStateChanged$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(isEnabledArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FitatuBarcodeScannerFlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(FitatuBarcodeScannerPigeonsPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }
  fun onCameraImage(cameraImageArg: CameraImage, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.fitatu_barcode_scanner.FitatuBarcodeScannerFlutterApi.onCameraImage$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(cameraImageArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FitatuBarcodeScannerFlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(FitatuBarcodeScannerPigeonsPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }
  fun onScanResult(codeArg: String?, formatArg: FitatuBarcodeFormat, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.fitatu_barcode_scanner.FitatuBarcodeScannerFlutterApi.onScanResult$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(codeArg, formatArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FitatuBarcodeScannerFlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(FitatuBarcodeScannerPigeonsPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }
  fun onScanError(errorArg: String, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.fitatu_barcode_scanner.FitatuBarcodeScannerFlutterApi.onScanError$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(errorArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FitatuBarcodeScannerFlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(FitatuBarcodeScannerPigeonsPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }
}
