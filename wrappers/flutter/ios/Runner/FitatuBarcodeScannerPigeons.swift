// Autogenerated from Pigeon (v25.5.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Sendable?

  init(code: String, message: String?, details: Sendable?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
  }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func createConnectionError(withChannelName channelName: String) -> PigeonError {
  return PigeonError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

func deepEqualsFitatuBarcodeScannerPigeons(_ lhs: Any?, _ rhs: Any?) -> Bool {
  let cleanLhs = nilOrValue(lhs) as Any?
  let cleanRhs = nilOrValue(rhs) as Any?
  switch (cleanLhs, cleanRhs) {
  case (nil, nil):
    return true

  case (nil, _), (_, nil):
    return false

  case is (Void, Void):
    return true

  case let (cleanLhsHashable, cleanRhsHashable) as (AnyHashable, AnyHashable):
    return cleanLhsHashable == cleanRhsHashable

  case let (cleanLhsArray, cleanRhsArray) as ([Any?], [Any?]):
    guard cleanLhsArray.count == cleanRhsArray.count else { return false }
    for (index, element) in cleanLhsArray.enumerated() {
      if !deepEqualsFitatuBarcodeScannerPigeons(element, cleanRhsArray[index]) {
        return false
      }
    }
    return true

  case let (cleanLhsDictionary, cleanRhsDictionary) as ([AnyHashable: Any?], [AnyHashable: Any?]):
    guard cleanLhsDictionary.count == cleanRhsDictionary.count else { return false }
    for (key, cleanLhsValue) in cleanLhsDictionary {
      guard cleanRhsDictionary.index(forKey: key) != nil else { return false }
      if !deepEqualsFitatuBarcodeScannerPigeons(cleanLhsValue, cleanRhsDictionary[key]!) {
        return false
      }
    }
    return true

  default:
    // Any other type shouldn't be able to be used with pigeon. File an issue if you find this to be untrue.
    return false
  }
}

func deepHashFitatuBarcodeScannerPigeons(value: Any?, hasher: inout Hasher) {
  if let valueList = value as? [AnyHashable] {
     for item in valueList { deepHashFitatuBarcodeScannerPigeons(value: item, hasher: &hasher) }
     return
  }

  if let valueDict = value as? [AnyHashable: AnyHashable] {
    for key in valueDict.keys { 
      hasher.combine(key)
      deepHashFitatuBarcodeScannerPigeons(value: valueDict[key]!, hasher: &hasher)
    }
    return
  }

  if let hashableValue = value as? AnyHashable {
    hasher.combine(hashableValue.hashValue)
  }

  return hasher.combine(String(describing: value))
}

    

enum FitatuBarcodeFormat: Int {
  /// Aztec 2D barcode format.
  case aztec = 0
  /// Codabar 1D barcode format, used in libraries, blood banks, parcels.
  case codabar = 1
  /// Code 39 1D barcode format, used in automotive and defense industries.
  case code39 = 2
  /// Code 93 1D barcode format, compact and high-density, used in logistics.
  case code93 = 3
  /// Code 128 1D barcode format, high-density, used in shipping and packaging.
  case code128 = 4
  /// DataBar (RSS-14) 1D barcode format, used in retail and coupons.
  case dataBar = 5
  /// DataBar Expanded 1D barcode format, stores more data, used for coupons.
  case dataBarExpanded = 6
  /// Data Matrix 2D barcode format, used for marking small items.
  case dataMatrix = 7
  /// EAN-8 1D barcode format, short version of EAN-13, used on small packages.
  case ean8 = 8
  /// EAN-13 1D barcode format, used worldwide for retail products.
  case ean13 = 9
  /// ITF (Interleaved 2 of 5) 1D barcode format, used on cartons and packaging.
  case itf = 10
  /// MaxiCode 2D barcode format, used by UPS for package tracking.
  case maxicode = 11
  /// PDF417 2D barcode format, used for transport, identification cards.
  case pdf417 = 12
  /// QR Code 2D barcode format, widely used for URLs, payments, and info.
  case qrCode = 13
  /// Micro QR Code 2D barcode format, smaller version of QR Code.
  case microQrCode = 14
  /// UPC-A 1D barcode format, used for retail products in North America.
  case upcA = 15
  /// UPC-E 1D barcode format, compressed version of UPC-A for small packages.
  case upcE = 16
  /// Special value that maps to the `BarcodeFormat.all` enum from the mobile_scanner package.
  /// See: https://pub.dev/documentation/mobile_scanner/latest/mobile_scanner/BarcodeFormat.html
  case all = 17
  /// Unknown code format
  case unknown = 18
}

/// Generated class from Pigeon that represents data sent in messages.
struct CameraConfig: Hashable {
  var textureId: Int64
  var previewWidth: Int64
  var previewHeight: Int64


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> CameraConfig? {
    let textureId = pigeonVar_list[0] as! Int64
    let previewWidth = pigeonVar_list[1] as! Int64
    let previewHeight = pigeonVar_list[2] as! Int64

    return CameraConfig(
      textureId: textureId,
      previewWidth: previewWidth,
      previewHeight: previewHeight
    )
  }
  func toList() -> [Any?] {
    return [
      textureId,
      previewWidth,
      previewHeight,
    ]
  }
  static func == (lhs: CameraConfig, rhs: CameraConfig) -> Bool {
    return deepEqualsFitatuBarcodeScannerPigeons(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashFitatuBarcodeScannerPigeons(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct CameraImage: Hashable {
  var cropRect: CropRect
  var width: Int64
  var height: Int64
  var rotationDegrees: Int64


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> CameraImage? {
    let cropRect = pigeonVar_list[0] as! CropRect
    let width = pigeonVar_list[1] as! Int64
    let height = pigeonVar_list[2] as! Int64
    let rotationDegrees = pigeonVar_list[3] as! Int64

    return CameraImage(
      cropRect: cropRect,
      width: width,
      height: height,
      rotationDegrees: rotationDegrees
    )
  }
  func toList() -> [Any?] {
    return [
      cropRect,
      width,
      height,
      rotationDegrees,
    ]
  }
  static func == (lhs: CameraImage, rhs: CameraImage) -> Bool {
    return deepEqualsFitatuBarcodeScannerPigeons(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashFitatuBarcodeScannerPigeons(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct CropRect: Hashable {
  var left: Int64
  var top: Int64
  var right: Int64
  var bottom: Int64


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> CropRect? {
    let left = pigeonVar_list[0] as! Int64
    let top = pigeonVar_list[1] as! Int64
    let right = pigeonVar_list[2] as! Int64
    let bottom = pigeonVar_list[3] as! Int64

    return CropRect(
      left: left,
      top: top,
      right: right,
      bottom: bottom
    )
  }
  func toList() -> [Any?] {
    return [
      left,
      top,
      right,
      bottom,
    ]
  }
  static func == (lhs: CropRect, rhs: CropRect) -> Bool {
    return deepEqualsFitatuBarcodeScannerPigeons(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashFitatuBarcodeScannerPigeons(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct ScannerOptions: Hashable {
  var tryHarder: Bool
  var tryRotate: Bool
  var tryInvert: Bool
  var qrCode: Bool
  var cropPercent: Double
  var scanDelay: Int64
  var scanDelaySuccess: Int64


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> ScannerOptions? {
    let tryHarder = pigeonVar_list[0] as! Bool
    let tryRotate = pigeonVar_list[1] as! Bool
    let tryInvert = pigeonVar_list[2] as! Bool
    let qrCode = pigeonVar_list[3] as! Bool
    let cropPercent = pigeonVar_list[4] as! Double
    let scanDelay = pigeonVar_list[5] as! Int64
    let scanDelaySuccess = pigeonVar_list[6] as! Int64

    return ScannerOptions(
      tryHarder: tryHarder,
      tryRotate: tryRotate,
      tryInvert: tryInvert,
      qrCode: qrCode,
      cropPercent: cropPercent,
      scanDelay: scanDelay,
      scanDelaySuccess: scanDelaySuccess
    )
  }
  func toList() -> [Any?] {
    return [
      tryHarder,
      tryRotate,
      tryInvert,
      qrCode,
      cropPercent,
      scanDelay,
      scanDelaySuccess,
    ]
  }
  static func == (lhs: ScannerOptions, rhs: ScannerOptions) -> Bool {
    return deepEqualsFitatuBarcodeScannerPigeons(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashFitatuBarcodeScannerPigeons(value: toList(), hasher: &hasher)
  }
}

private class FitatuBarcodeScannerPigeonsPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return FitatuBarcodeFormat(rawValue: enumResultAsInt)
      }
      return nil
    case 130:
      return CameraConfig.fromList(self.readValue() as! [Any?])
    case 131:
      return CameraImage.fromList(self.readValue() as! [Any?])
    case 132:
      return CropRect.fromList(self.readValue() as! [Any?])
    case 133:
      return ScannerOptions.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class FitatuBarcodeScannerPigeonsPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? FitatuBarcodeFormat {
      super.writeByte(129)
      super.writeValue(value.rawValue)
    } else if let value = value as? CameraConfig {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? CameraImage {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else if let value = value as? CropRect {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else if let value = value as? ScannerOptions {
      super.writeByte(133)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class FitatuBarcodeScannerPigeonsPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return FitatuBarcodeScannerPigeonsPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return FitatuBarcodeScannerPigeonsPigeonCodecWriter(data: data)
  }
}

class FitatuBarcodeScannerPigeonsPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = FitatuBarcodeScannerPigeonsPigeonCodec(readerWriter: FitatuBarcodeScannerPigeonsPigeonCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol FitatuBarcodeScannerHostApi {
  func init(options: ScannerOptions) throws
  func release() throws
  func setTorchEnabled(isEnabled: Bool) throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class FitatuBarcodeScannerHostApiSetup {
  static var codec: FlutterStandardMessageCodec { FitatuBarcodeScannerPigeonsPigeonCodec.shared }
  /// Sets up an instance of `FitatuBarcodeScannerHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: FitatuBarcodeScannerHostApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let initChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.fitatu_barcode_scanner.FitatuBarcodeScannerHostApi.init\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      initChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let optionsArg = args[0] as! ScannerOptions
        do {
          try api.init(options: optionsArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      initChannel.setMessageHandler(nil)
    }
    let releaseChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.fitatu_barcode_scanner.FitatuBarcodeScannerHostApi.release\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      releaseChannel.setMessageHandler { _, reply in
        do {
          try api.release()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      releaseChannel.setMessageHandler(nil)
    }
    let setTorchEnabledChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.fitatu_barcode_scanner.FitatuBarcodeScannerHostApi.setTorchEnabled\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setTorchEnabledChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let isEnabledArg = args[0] as! Bool
        do {
          try api.setTorchEnabled(isEnabled: isEnabledArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setTorchEnabledChannel.setMessageHandler(nil)
    }
  }
}
/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol FitatuBarcodeScannerFlutterApiProtocol {
  func onTextureChanged(cameraConfig cameraConfigArg: CameraConfig?, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onTorchStateChanged(isEnabled isEnabledArg: Bool, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onCameraImage(cameraImage cameraImageArg: CameraImage, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onScanResult(code codeArg: String?, format formatArg: FitatuBarcodeFormat, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onScanError(error errorArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void)
}
class FitatuBarcodeScannerFlutterApi: FitatuBarcodeScannerFlutterApiProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  private let messageChannelSuffix: String
  init(binaryMessenger: FlutterBinaryMessenger, messageChannelSuffix: String = "") {
    self.binaryMessenger = binaryMessenger
    self.messageChannelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
  var codec: FitatuBarcodeScannerPigeonsPigeonCodec {
    return FitatuBarcodeScannerPigeonsPigeonCodec.shared
  }
  func onTextureChanged(cameraConfig cameraConfigArg: CameraConfig?, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.fitatu_barcode_scanner.FitatuBarcodeScannerFlutterApi.onTextureChanged\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([cameraConfigArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func onTorchStateChanged(isEnabled isEnabledArg: Bool, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.fitatu_barcode_scanner.FitatuBarcodeScannerFlutterApi.onTorchStateChanged\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([isEnabledArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func onCameraImage(cameraImage cameraImageArg: CameraImage, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.fitatu_barcode_scanner.FitatuBarcodeScannerFlutterApi.onCameraImage\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([cameraImageArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func onScanResult(code codeArg: String?, format formatArg: FitatuBarcodeFormat, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.fitatu_barcode_scanner.FitatuBarcodeScannerFlutterApi.onScanResult\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([codeArg, formatArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func onScanError(error errorArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.fitatu_barcode_scanner.FitatuBarcodeScannerFlutterApi.onScanError\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([errorArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
}
