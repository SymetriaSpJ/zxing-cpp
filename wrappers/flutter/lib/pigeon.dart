// Autogenerated from Pigeon (v25.5.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse({Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}
bool _deepEquals(Object? a, Object? b) {
  if (a is List && b is List) {
    return a.length == b.length &&
        a.indexed
        .every(((int, dynamic) item) => _deepEquals(item.$2, b[item.$1]));
  }
  if (a is Map && b is Map) {
    return a.length == b.length && a.entries.every((MapEntry<Object?, Object?> entry) =>
        (b as Map<Object?, Object?>).containsKey(entry.key) &&
        _deepEquals(entry.value, b[entry.key]));
  }
  return a == b;
}


enum FitatuBarcodeFormat {
  /// No format detected.
  none,
  /// Aztec 2D barcode format.
  aztec,
  /// Codabar 1D barcode format, used in libraries, blood banks, parcels.
  codabar,
  /// Code 39 1D barcode format, used in automotive and defense industries.
  code39,
  /// Code 93 1D barcode format, compact and high-density, used in logistics.
  code93,
  /// Code 128 1D barcode format, high-density, used in shipping and packaging.
  code128,
  /// DataBar (RSS-14) 1D barcode format, used in retail and coupons.
  dataBar,
  /// DataBar Expanded 1D barcode format, stores more data, used for coupons.
  dataBarExpanded,
  /// Data Matrix 2D barcode format, used for marking small items.
  dataMatrix,
  /// EAN-8 1D barcode format, short version of EAN-13, used on small packages.
  ean8,
  /// EAN-13 1D barcode format, used worldwide for retail products.
  ean13,
  /// ITF (Interleaved 2 of 5) 1D barcode format, used on cartons and packaging.
  itf,
  /// MaxiCode 2D barcode format, used by UPS for package tracking.
  maxicode,
  /// PDF417 2D barcode format, used for transport, identification cards.
  pdf417,
  /// QR Code 2D barcode format, widely used for URLs, payments, and info.
  qrCode,
  /// Micro QR Code 2D barcode format, smaller version of QR Code.
  microQrCode,
  /// UPC-A 1D barcode format, used for retail products in North America.
  upcA,
  /// UPC-E 1D barcode format, compressed version of UPC-A for small packages.
  upcE,
  /// Special value that maps to the `BarcodeFormat.all` enum from the mobile_scanner package.
  /// See: https://pub.dev/documentation/mobile_scanner/latest/mobile_scanner/BarcodeFormat.html
  all,
  /// Special value that maps to the `BarcodeFormat.unknown` enum from the mobile_scanner package.
  /// See: https://pub.dev/documentation/mobile_scanner/latest/mobile_scanner/BarcodeFormat.html
  unknowm,
}

class FitatuBarcodeScannerResult {
  FitatuBarcodeScannerResult({
    this.code,
    required this.format,
  });

  String? code;

  FitatuBarcodeFormat format;

  List<Object?> _toList() {
    return <Object?>[
      code,
      format,
    ];
  }

  Object encode() {
    return _toList();  }

  static FitatuBarcodeScannerResult decode(Object result) {
    result as List<Object?>;
    return FitatuBarcodeScannerResult(
      code: result[0] as String?,
      format: result[1]! as FitatuBarcodeFormat,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! FitatuBarcodeScannerResult || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class CameraConfig {
  CameraConfig({
    required this.textureId,
    required this.previewWidth,
    required this.previewHeight,
  });

  int textureId;

  int previewWidth;

  int previewHeight;

  List<Object?> _toList() {
    return <Object?>[
      textureId,
      previewWidth,
      previewHeight,
    ];
  }

  Object encode() {
    return _toList();  }

  static CameraConfig decode(Object result) {
    result as List<Object?>;
    return CameraConfig(
      textureId: result[0]! as int,
      previewWidth: result[1]! as int,
      previewHeight: result[2]! as int,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! CameraConfig || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class CameraImage {
  CameraImage({
    required this.cropRect,
    required this.width,
    required this.height,
    required this.rotationDegrees,
  });

  CropRect cropRect;

  int width;

  int height;

  int rotationDegrees;

  List<Object?> _toList() {
    return <Object?>[
      cropRect,
      width,
      height,
      rotationDegrees,
    ];
  }

  Object encode() {
    return _toList();  }

  static CameraImage decode(Object result) {
    result as List<Object?>;
    return CameraImage(
      cropRect: result[0]! as CropRect,
      width: result[1]! as int,
      height: result[2]! as int,
      rotationDegrees: result[3]! as int,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! CameraImage || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class CropRect {
  CropRect({
    required this.left,
    required this.top,
    required this.right,
    required this.bottom,
  });

  int left;

  int top;

  int right;

  int bottom;

  List<Object?> _toList() {
    return <Object?>[
      left,
      top,
      right,
      bottom,
    ];
  }

  Object encode() {
    return _toList();  }

  static CropRect decode(Object result) {
    result as List<Object?>;
    return CropRect(
      left: result[0]! as int,
      top: result[1]! as int,
      right: result[2]! as int,
      bottom: result[3]! as int,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! CropRect || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class ScannerOptions {
  ScannerOptions({
    required this.tryHarder,
    required this.tryRotate,
    required this.tryInvert,
    required this.qrCode,
    required this.cropPercent,
    required this.scanDelay,
    required this.scanDelaySuccess,
  });

  bool tryHarder;

  bool tryRotate;

  bool tryInvert;

  bool qrCode;

  double cropPercent;

  int scanDelay;

  int scanDelaySuccess;

  List<Object?> _toList() {
    return <Object?>[
      tryHarder,
      tryRotate,
      tryInvert,
      qrCode,
      cropPercent,
      scanDelay,
      scanDelaySuccess,
    ];
  }

  Object encode() {
    return _toList();  }

  static ScannerOptions decode(Object result) {
    result as List<Object?>;
    return ScannerOptions(
      tryHarder: result[0]! as bool,
      tryRotate: result[1]! as bool,
      tryInvert: result[2]! as bool,
      qrCode: result[3]! as bool,
      cropPercent: result[4]! as double,
      scanDelay: result[5]! as int,
      scanDelaySuccess: result[6]! as int,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! ScannerOptions || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}


class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    }    else if (value is FitatuBarcodeFormat) {
      buffer.putUint8(129);
      writeValue(buffer, value.index);
    }    else if (value is FitatuBarcodeScannerResult) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    }    else if (value is CameraConfig) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    }    else if (value is CameraImage) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    }    else if (value is CropRect) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    }    else if (value is ScannerOptions) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : FitatuBarcodeFormat.values[value];
      case 130: 
        return FitatuBarcodeScannerResult.decode(readValue(buffer)!);
      case 131: 
        return CameraConfig.decode(readValue(buffer)!);
      case 132: 
        return CameraImage.decode(readValue(buffer)!);
      case 133: 
        return CropRect.decode(readValue(buffer)!);
      case 134: 
        return ScannerOptions.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class FitatuBarcodeScannerHostApi {
  /// Constructor for [FitatuBarcodeScannerHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  FitatuBarcodeScannerHostApi({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<void> init(ScannerOptions options) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.fitatu_barcode_scanner.FitatuBarcodeScannerHostApi.init$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[options]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> release() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.fitatu_barcode_scanner.FitatuBarcodeScannerHostApi.release$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setTorchEnabled(bool isEnabled) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.fitatu_barcode_scanner.FitatuBarcodeScannerHostApi.setTorchEnabled$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[isEnabled]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }
}

abstract class FitatuBarcodeScannerFlutterApi {
  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  void onTextureChanged(CameraConfig? cameraConfig);

  void onTorchStateChanged(bool isEnabled);

  void onCameraImage(CameraImage cameraImage);

  void onScanResult(FitatuBarcodeScannerResult code);

  void onScanError(String error);

  static void setUp(FitatuBarcodeScannerFlutterApi? api, {BinaryMessenger? binaryMessenger, String messageChannelSuffix = '',}) {
    messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.fitatu_barcode_scanner.FitatuBarcodeScannerFlutterApi.onTextureChanged$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.fitatu_barcode_scanner.FitatuBarcodeScannerFlutterApi.onTextureChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final CameraConfig? arg_cameraConfig = (args[0] as CameraConfig?);
          try {
            api.onTextureChanged(arg_cameraConfig);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.fitatu_barcode_scanner.FitatuBarcodeScannerFlutterApi.onTorchStateChanged$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.fitatu_barcode_scanner.FitatuBarcodeScannerFlutterApi.onTorchStateChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final bool? arg_isEnabled = (args[0] as bool?);
          assert(arg_isEnabled != null,
              'Argument for dev.flutter.pigeon.fitatu_barcode_scanner.FitatuBarcodeScannerFlutterApi.onTorchStateChanged was null, expected non-null bool.');
          try {
            api.onTorchStateChanged(arg_isEnabled!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.fitatu_barcode_scanner.FitatuBarcodeScannerFlutterApi.onCameraImage$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.fitatu_barcode_scanner.FitatuBarcodeScannerFlutterApi.onCameraImage was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final CameraImage? arg_cameraImage = (args[0] as CameraImage?);
          assert(arg_cameraImage != null,
              'Argument for dev.flutter.pigeon.fitatu_barcode_scanner.FitatuBarcodeScannerFlutterApi.onCameraImage was null, expected non-null CameraImage.');
          try {
            api.onCameraImage(arg_cameraImage!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.fitatu_barcode_scanner.FitatuBarcodeScannerFlutterApi.onScanResult$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.fitatu_barcode_scanner.FitatuBarcodeScannerFlutterApi.onScanResult was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final FitatuBarcodeScannerResult? arg_code = (args[0] as FitatuBarcodeScannerResult?);
          assert(arg_code != null,
              'Argument for dev.flutter.pigeon.fitatu_barcode_scanner.FitatuBarcodeScannerFlutterApi.onScanResult was null, expected non-null FitatuBarcodeScannerResult.');
          try {
            api.onScanResult(arg_code!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.fitatu_barcode_scanner.FitatuBarcodeScannerFlutterApi.onScanError$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.fitatu_barcode_scanner.FitatuBarcodeScannerFlutterApi.onScanError was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_error = (args[0] as String?);
          assert(arg_error != null,
              'Argument for dev.flutter.pigeon.fitatu_barcode_scanner.FitatuBarcodeScannerFlutterApi.onScanError was null, expected non-null String.');
          try {
            api.onScanError(arg_error!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}
